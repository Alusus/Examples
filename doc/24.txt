Functions are defined using `function` as the definition in `def` command.
```
def <func name> : function (<arguments>) => <return_type> { <function_body> }
```
Arguments take the following form:
```
<arg_name>:<arg_type>, <arg_name>:<arg_type> ...
```
For example:
```
def factorial : function (i:Int) => Int
{
    if i==1 return 1;
    return i*factorial(i-1);
}
```
It is also possible to use a short form without the `def` command, as follows:
```
function <func name> (<arguments>): <return_type> { <function_body> }
```
For example:
```
function factorial (i:Int): Int
{
    if i==1 return 1;
    return i*factorial(i-1);
}
```
Calling a function is done by using the function's name followed by the arguments list enclosed in round brackets. In case of no arguments, the function name is followed by empty round brackets.
```
x = readNumber();
y = readNumber();
drawPoint(x, y);
```
If the function does not return anything we should not add a return arg_type
For example:
```
import "Srl/Array";
import "Srl/Console";


use Srl;


func print(a: ref[Array[Int]]) {
    def i: Int;
    for i = 0 , i < a.getLength() , i++ {
        Console.print("%d ", a(i));
    }
}
```
