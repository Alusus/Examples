Reference template that points to a shared object but it does not participate in owning the object, which means it does not update the reference count of the object. If all `SrdRef` instances pointing to a specific object are terminated then that object will be released even if some `WkRef` instances are still pointing to it. This type of references is useful to avoid circular references which lead to memory leaks. So if you have an object that owns another object through `SrdRef` reference, and the inner object needs a reference to the outer object, then using `SrdRef` in the inner object will lead to a circular reference, whereas using `WkRef` in the inner object won't lead to that because releasing the outer object in this case will cause both objects to be released.
The difference between using `WkRef` and using `ref`, is that the first holds references count's information even if it does not use it, whereas the later does not hold this information, so it is possible to get `SrdRef` from `WkRef` but we could not get `SrdRef` from `ref` because the later does not holds the count information that `SrdRef` needs.
The way to use `WkRef` is the same as `SrdRef`.
