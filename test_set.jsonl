{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"arAlusus\":\nfunction checkOrder(arr) {\n    let isAscending = true;\n    let isDescending = true;\n\n    for(let i = 0; i < arr.length - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nاشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "استخرج العناصر الفريدة من المصفوفة المعطاة و أرجع النتيجة"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"enAlusus\":\n#define MAX 100000  // Maximum range of values in the array\n\nvoid findFrequency(int a[], int n, int freq[]) {\n    for(int i = 0; i < MAX; i++) {\n        freq[i] = 0;\n    }\n\n    for(int i = 0; i < n; i++) {\n        freq[a[i]]++;\n    }\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"arAlusus\":\nfunction is_string_alphanumeric(s) {\n    for (let i = 0; i < s.length; i++) {\n        console.log(s[i]);\n        const c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"enAlusus\":\nfunction min(a) {\n    let result = a[0];\n    for (let i = 1 ; i < a.length ; i++) {\n        if (result > a[i]) {\n            result = a[i];\n        }\n    }\n    return result;\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using c, Find and return the minimum in the given array `a`"}, {"role": "assistant", "content": "int findMin(int* a, int n) {\n    int min = a[0];\n    for(int i = 1; i < n; i++) {\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    return min;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"enAlusus\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}, {"role": "assistant", "content": "calculate and return the frequency of each element in the given array"}]}
{"messages": [{"role": "user", "content": "Using js, check if a given string ends with another given string"}, {"role": "assistant", "content": "function endsWith(str, suffix) {\n    let j = suffix.length - 1;\n    for(let i = str.length - 1; i >= 0 && j >= 0; i--, j--) {\n        if(str[i] !== suffix[j])\n            return false;\n    }\n    return j < 0;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"js\":\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}, {"role": "assistant", "content": "function findFrequency(a) {\n    let freq = {};\n    for(let i = 0; i < a.length; i++) {\n        const key = a[i].toString();\n        if(freq[key] === undefined) {\n            freq[key] = 1;\n        } else {\n            freq[key]++;\n        }\n    }\n\n    return freq;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using c, Check if a given array is ordered and return 1 in case of Ascending order, -1 in case of Descending order, 0 otherwise"}, {"role": "assistant", "content": "#include <stdbool.h>\n\nint checkOrder(int arr[], int n) {\n    bool isAscending = true;\n    bool isDescending = true;\n\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"enAlusus\":\nint rfind_char(char s[], int n, char c) {\n    for (int i = n-1; i != 0; i--) {\n        if (s[i] == c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "تحقق فيما إذا كانت سلسلة نصية معطاة تنتهي بسلسلة نصية أخرى معطاة"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"arAlusus\":\nvoid findUniqueElements(int arr[], int n, int uniqueElements[], int *uniqueCount) {\n    // a flag used to indicate whether the element is unique or not\n    int isUnique;\n\n    // loop through the array\n    for (int i = 0; i < n; i++) {\n        isUnique = 1;\n\n        // check if the element is occurred before\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j]) {\n                isUnique = 0;\n                break;\n            }\n        }\n\n        // if the element is unique add it to array\n        if (isUnique) {\n            uniqueElements[(*uniqueCount)++] = arr[i];\n        }\n    }\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nimport \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}, {"role": "assistant", "content": "find and return the position of a given char in a given string starting from its end"}]}
{"messages": [{"role": "user", "content": "Using c, find and return the position of a given char in a given string starting from its end"}, {"role": "assistant", "content": "int rfind_char(char s[], int n, char c) {\n    for (int i = n-1; i != 0; i--) {\n        if (s[i] == c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "check if all characters of a given string are alphanumeric"}]}
{"messages": [{"role": "user", "content": "What this code do?\nint findMin(int* a, int n) {\n    int min = a[0];\n    for(int i = 1; i < n; i++) {\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    return min;\n}\n"}, {"role": "assistant", "content": "Find and return the minimum in the given array `a`"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"js\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}, {"role": "assistant", "content": "function rfind_char(s, c) {\n    for (let i = s.length - 1; i !== 0; i--) {\n        if (s[i] === c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"enAlusus\":\nfunction endsWith(str, suffix) {\n    let j = suffix.length - 1;\n    for(let i = str.length - 1; i >= 0 && j >= 0; i--, j--) {\n        if(str[i] !== suffix[j])\n            return false;\n    }\n    return j < 0;\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"enAlusus\":\nvoid findUniqueElements(int arr[], int n, int uniqueElements[], int *uniqueCount) {\n    // a flag used to indicate whether the element is unique or not\n    int isUnique;\n\n    // loop through the array\n    for (int i = 0; i < n; i++) {\n        isUnique = 1;\n\n        // check if the element is occurred before\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j]) {\n                isUnique = 0;\n                break;\n            }\n        }\n\n        // if the element is unique add it to array\n        if (isUnique) {\n            uniqueElements[(*uniqueCount)++] = arr[i];\n        }\n    }\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using arAlusus, جد و أرجع موقع محرف معطى ضمن سلسلة نصية معطاة بدءاً من نهايتها"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}]}
{"messages": [{"role": "user", "content": "Using js, check if all characters of a given string are alphanumeric"}, {"role": "assistant", "content": "function is_string_alphanumeric(s) {\n    for (let i = 0; i < s.length; i++) {\n        console.log(s[i]);\n        const c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"c\":\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "#include <stdbool.h>\n\nint checkOrder(int arr[], int n) {\n    bool isAscending = true;\n    bool isDescending = true;\n\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "Using c, calculate and return the frequency of each element in the given array"}, {"role": "assistant", "content": "#define MAX 100000  // Maximum range of values in the array\n\nvoid findFrequency(int a[], int n, int freq[]) {\n    for(int i = 0; i < MAX; i++) {\n        freq[i] = 0;\n    }\n\n    for(int i = 0; i < n; i++) {\n        freq[a[i]]++;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"c\":\nimport \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}, {"role": "assistant", "content": "int rfind_char(char s[], int n, char c) {\n    for (int i = n-1; i != 0; i--) {\n        if (s[i] == c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"js\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "function endsWith(str, suffix) {\n    let j = suffix.length - 1;\n    for(let i = str.length - 1; i >= 0 && j >= 0; i--, j--) {\n        if(str[i] !== suffix[j])\n            return false;\n    }\n    return j < 0;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using js, Find and return the minimum in the given array `a`"}, {"role": "assistant", "content": "function min(a) {\n    let result = a[0];\n    for (let i = 1 ; i < a.length ; i++) {\n        if (result > a[i]) {\n            result = a[i];\n        }\n    }\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using arAlusus, اختبر فيما إذا كانت كل محارف سلسلة نصية معطاة من الأبجدية أو الأرقام"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nfunction findFrequency(a) {\n    let freq = {};\n    for(let i = 0; i < a.length; i++) {\n        const key = a[i].toString();\n        if(freq[key] === undefined) {\n            freq[key] = 1;\n        } else {\n            freq[key]++;\n        }\n    }\n\n    return freq;\n}\n"}, {"role": "assistant", "content": "calculate and return the frequency of each element in the given array"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"js\":\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "function is_string_alphanumeric(s) {\n    for (let i = 0; i < s.length; i++) {\n        console.log(s[i]);\n        const c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nfunction min(a) {\n    let result = a[0];\n    for (let i = 1 ; i < a.length ; i++) {\n        if (result > a[i]) {\n            result = a[i];\n        }\n    }\n    return result;\n}\n"}, {"role": "assistant", "content": "Find and return the minimum in the given array `a`"}]}
{"messages": [{"role": "user", "content": "Using c, check if all characters of a given string are alphanumeric"}, {"role": "assistant", "content": "#include <stdbool.h>\n\nbool is_string_alphanumeric(char s[], int n) {\n    for (int i = 0; i < n; i++) {\n        const char c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nvoid findUniqueElements(int arr[], int n, int uniqueElements[], int *uniqueCount) {\n    // a flag used to indicate whether the element is unique or not\n    int isUnique;\n\n    // loop through the array\n    for (int i = 0; i < n; i++) {\n        isUnique = 1;\n\n        // check if the element is occurred before\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j]) {\n                isUnique = 0;\n                break;\n            }\n        }\n\n        // if the element is unique add it to array\n        if (isUnique) {\n            uniqueElements[(*uniqueCount)++] = arr[i];\n        }\n    }\n}\n"}, {"role": "assistant", "content": "extract unique elements in the given array and return the result"}]}
{"messages": [{"role": "user", "content": "Using c, check if a given string ends with another given string"}, {"role": "assistant", "content": "int ends_with(const char *str, const char *suffix) {\n    const char *a = str;\n    const char *b = suffix;\n\n    // Find the end of both strings\n    while(*a) a++;\n    while(*b) b++;\n\n    // Walk backwards until we find a mismatch or reach the start\n    while(a >= str && b >= suffix) {\n        if(*a-- != *b--)\n            return 0;\n    }\n\n    // If we reached the start of the suffix we found a match\n    return b < suffix;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"enAlusus\":\nfunction rfind_char(s, c) {\n    for (let i = s.length - 1; i !== 0; i--) {\n        if (s[i] === c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"arAlusus\":\nint ends_with(const char *str, const char *suffix) {\n    const char *a = str;\n    const char *b = suffix;\n\n    // Find the end of both strings\n    while(*a) a++;\n    while(*b) b++;\n\n    // Walk backwards until we find a mismatch or reach the start\n    while(a >= str && b >= suffix) {\n        if(*a-- != *b--)\n            return 0;\n    }\n\n    // If we reached the start of the suffix we found a match\n    return b < suffix;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"enAlusus\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"js\":\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "function endsWith(str, suffix) {\n    let j = suffix.length - 1;\n    for(let i = str.length - 1; i >= 0 && j >= 0; i--, j--) {\n        if(str[i] !== suffix[j])\n            return false;\n    }\n    return j < 0;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"arAlusus\":\nfunction min(a) {\n    let result = a[0];\n    for (let i = 1 ; i < a.length ; i++) {\n        if (result > a[i]) {\n            result = a[i];\n        }\n    }\n    return result;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "Using arAlusus, احسب و أرجع تكرار كل عنصر في المصفوفة المعطاة"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "Using enAlusus, check if all characters of a given string are alphanumeric"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nint ends_with(const char *str, const char *suffix) {\n    const char *a = str;\n    const char *b = suffix;\n\n    // Find the end of both strings\n    while(*a) a++;\n    while(*b) b++;\n\n    // Walk backwards until we find a mismatch or reach the start\n    while(a >= str && b >= suffix) {\n        if(*a-- != *b--)\n            return 0;\n    }\n\n    // If we reached the start of the suffix we found a match\n    return b < suffix;\n}\n"}, {"role": "assistant", "content": "check if a given string ends with another given string"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"arAlusus\":\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"enAlusus\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"enAlusus\":\nfunction checkOrder(arr) {\n    let isAscending = true;\n    let isDescending = true;\n\n    for(let i = 0; i < arr.length - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nfunction unique(a) {\n    const hash = new Map();\n    let result = [];\n\n    for (let i = 0; i < a.length; i++) {\n        if (!hash.has(a[i])) {\n            hash.set(a[i], true);\n            result.push(a[i]);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "extract unique elements in the given array and return the result"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"c\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}, {"role": "assistant", "content": "int rfind_char(char s[], int n, char c) {\n    for (int i = n-1; i != 0; i--) {\n        if (s[i] == c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nfunction endsWith(str, suffix) {\n    let j = suffix.length - 1;\n    for(let i = str.length - 1; i >= 0 && j >= 0; i--, j--) {\n        if(str[i] !== suffix[j])\n            return false;\n    }\n    return j < 0;\n}\n"}, {"role": "assistant", "content": "check if a given string ends with another given string"}]}
{"messages": [{"role": "user", "content": "Using js, calculate and return the frequency of each element in the given array"}, {"role": "assistant", "content": "function findFrequency(a) {\n    let freq = {};\n    for(let i = 0; i < a.length; i++) {\n        const key = a[i].toString();\n        if(freq[key] === undefined) {\n            freq[key] = 1;\n        } else {\n            freq[key]++;\n        }\n    }\n\n    return freq;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"c\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}, {"role": "assistant", "content": "#define MAX 100000  // Maximum range of values in the array\n\nvoid findFrequency(int a[], int n, int freq[]) {\n    for(int i = 0; i < MAX; i++) {\n        freq[i] = 0;\n    }\n\n    for(int i = 0; i < n; i++) {\n        freq[a[i]]++;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"arAlusus\":\nint findMin(int* a, int n) {\n    int min = a[0];\n    for(int i = 1; i < n; i++) {\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    return min;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nfunction rfind_char(s, c) {\n    for (let i = s.length - 1; i !== 0; i--) {\n        if (s[i] === c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}, {"role": "assistant", "content": "find and return the position of a given char in a given string starting from its end"}]}
{"messages": [{"role": "user", "content": "Using enAlusus, find and return the position of a given char in a given string starting from its end"}, {"role": "assistant", "content": "import \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"enAlusus\":\n#include <stdbool.h>\n\nbool is_string_alphanumeric(char s[], int n) {\n    for (int i = 0; i < n; i++) {\n        const char c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nimport \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "extract unique elements in the given array and return the result"}]}
{"messages": [{"role": "user", "content": "Using enAlusus, Check if a given array is ordered and return 1 in case of Ascending order, -1 in case of Descending order, 0 otherwise"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"arAlusus\":\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"js\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "function is_string_alphanumeric(s) {\n    for (let i = 0; i < s.length; i++) {\n        console.log(s[i]);\n        const c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"js\":\nimport \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "function unique(a) {\n    const hash = new Map();\n    let result = [];\n\n    for (let i = 0; i < a.length; i++) {\n        if (!hash.has(a[i])) {\n            hash.set(a[i], true);\n            result.push(a[i]);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"arAlusus\":\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"arAlusus\":\nfunction unique(a) {\n    const hash = new Map();\n    let result = [];\n\n    for (let i = 0; i < a.length; i++) {\n        if (!hash.has(a[i])) {\n            hash.set(a[i], true);\n            result.push(a[i]);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"arAlusus\":\nfunction rfind_char(s, c) {\n    for (let i = s.length - 1; i !== 0; i--) {\n        if (s[i] === c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "check if a given string ends with another given string"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"arAlusus\":\n#include <stdbool.h>\n\nint checkOrder(int arr[], int n) {\n    bool isAscending = true;\n    bool isDescending = true;\n\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"js\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}, {"role": "assistant", "content": "function checkOrder(arr) {\n    let isAscending = true;\n    let isDescending = true;\n\n    for(let i = 0; i < arr.length - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"c\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "#include <stdbool.h>\n\nbool is_string_alphanumeric(char s[], int n) {\n    for (int i = 0; i < n; i++) {\n        const char c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using enAlusus, check if a given string ends with another given string"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"enAlusus\":\nاشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using js, extract unique elements in the given array and return the result"}, {"role": "assistant", "content": "function unique(a) {\n    const hash = new Map();\n    let result = [];\n\n    for (let i = 0; i < a.length; i++) {\n        if (!hash.has(a[i])) {\n            hash.set(a[i], true);\n            result.push(a[i]);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"enAlusus\":\nint ends_with(const char *str, const char *suffix) {\n    const char *a = str;\n    const char *b = suffix;\n\n    // Find the end of both strings\n    while(*a) a++;\n    while(*b) b++;\n\n    // Walk backwards until we find a mismatch or reach the start\n    while(a >= str && b >= suffix) {\n        if(*a-- != *b--)\n            return 0;\n    }\n\n    // If we reached the start of the suffix we found a match\n    return b < suffix;\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"c\":\nimport \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "int findMin(int* a, int n) {\n    int min = a[0];\n    for(int i = 1; i < n; i++) {\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    return min;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nint rfind_char(char s[], int n, char c) {\n    for (int i = n-1; i != 0; i--) {\n        if (s[i] == c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}, {"role": "assistant", "content": "find and return the position of a given char in a given string starting from its end"}]}
{"messages": [{"role": "user", "content": "What this code do?\n#include <stdbool.h>\n\nbool is_string_alphanumeric(char s[], int n) {\n    for (int i = 0; i < n; i++) {\n        const char c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}, {"role": "assistant", "content": "check if all characters of a given string are alphanumeric"}]}
{"messages": [{"role": "user", "content": "What this code do?\n#include <stdbool.h>\n\nint checkOrder(int arr[], int n) {\n    bool isAscending = true;\n    bool isDescending = true;\n\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "Check if a given array is ordered and return 1 in case of Ascending order, -1 in case of Descending order, 0 otherwise"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"js\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}, {"role": "assistant", "content": "function findFrequency(a) {\n    let freq = {};\n    for(let i = 0; i < a.length; i++) {\n        const key = a[i].toString();\n        if(freq[key] === undefined) {\n            freq[key] = 1;\n        } else {\n            freq[key]++;\n        }\n    }\n\n    return freq;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"arAlusus\":\n#include <stdbool.h>\n\nbool is_string_alphanumeric(char s[], int n) {\n    for (int i = 0; i < n; i++) {\n        const char c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}, {"role": "assistant", "content": "تحقق فيما إذا كانت مصفوفة معطاة مرتبة و ارجع 1 في حال كانت مرتبة تصاعديًا، -1 في حال كانت مرتبة تنازليًا، 0 في حال كانت غير مرتبة"}]}
{"messages": [{"role": "user", "content": "Using enAlusus, extract unique elements in the given array and return the result"}, {"role": "assistant", "content": "import \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"c\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}, {"role": "assistant", "content": "#include <stdbool.h>\n\nint checkOrder(int arr[], int n) {\n    bool isAscending = true;\n    bool isDescending = true;\n\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "Using arAlusus, تحقق فيما إذا كانت سلسلة نصية معطاة تنتهي بسلسلة نصية أخرى معطاة"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "Using js, Check if a given array is ordered and return 1 in case of Ascending order, -1 in case of Descending order, 0 otherwise"}, {"role": "assistant", "content": "function checkOrder(arr) {\n    let isAscending = true;\n    let isDescending = true;\n\n    for(let i = 0; i < arr.length - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}, {"role": "assistant", "content": "احسب و أرجع تكرار كل عنصر في المصفوفة المعطاة"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"enAlusus\":\nfunction findFrequency(a) {\n    let freq = {};\n    for(let i = 0; i < a.length; i++) {\n        const key = a[i].toString();\n        if(freq[key] === undefined) {\n            freq[key] = 1;\n        } else {\n            freq[key]++;\n        }\n    }\n\n    return freq;\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"enAlusus\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"js\":\nاشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "function unique(a) {\n    const hash = new Map();\n    let result = [];\n\n    for (let i = 0; i < a.length; i++) {\n        if (!hash.has(a[i])) {\n            hash.set(a[i], true);\n            result.push(a[i]);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\n#define MAX 100000  // Maximum range of values in the array\n\nvoid findFrequency(int a[], int n, int freq[]) {\n    for(int i = 0; i < MAX; i++) {\n        freq[i] = 0;\n    }\n\n    for(int i = 0; i < n; i++) {\n        freq[a[i]]++;\n    }\n}\n"}, {"role": "assistant", "content": "calculate and return the frequency of each element in the given array"}]}
{"messages": [{"role": "user", "content": "What this code do?\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "اختبر فيما إذا كانت كل محارف سلسلة نصية معطاة من الأبجدية أو الأرقام"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"enAlusus\":\nfunction unique(a) {\n    const hash = new Map();\n    let result = [];\n\n    for (let i = 0; i < a.length; i++) {\n        if (!hash.has(a[i])) {\n            hash.set(a[i], true);\n            result.push(a[i]);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using arAlusus, تحقق فيما إذا كانت مصفوفة معطاة مرتبة و ارجع 1 في حال كانت مرتبة تصاعديًا، -1 في حال كانت مرتبة تنازليًا، 0 في حال كانت غير مرتبة"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة تحقق_من_الترتيب(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\tعرف تصاعدي: ثـنائي = صح؛\n\tعرف تنازلي: ثـنائي = صح؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل + 1 < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) > م(دليل + 1) {\n\t\t\tتصاعدي = خطأ؛\n\t\t}\n\t\tوإلا إذا م(دليل) < م(دليل + 1) {\n\t\t\tتنازلي = خطأ؛\n\t\t}\n\t}\n\t\n\tإذا تصاعدي {\n\t\tارجع 1؛\n\t}\n\tوإلا إذا تنازلي {\n\t\tارجع -1؛\n\t}\n\tوإلا {\n\t\tارجع 0؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"js\":\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "function checkOrder(arr) {\n    let isAscending = true;\n    let isDescending = true;\n\n    for(let i = 0; i < arr.length - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"arAlusus\":\nfunction endsWith(str, suffix) {\n    let j = suffix.length - 1;\n    for(let i = str.length - 1; i >= 0 && j >= 0; i--, j--) {\n        if(str[i] !== suffix[j])\n            return false;\n    }\n    return j < 0;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"c\":\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "#include <stdbool.h>\n\nbool is_string_alphanumeric(char s[], int n) {\n    for (int i = 0; i < n; i++) {\n        const char c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"c\":\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "int ends_with(const char *str, const char *suffix) {\n    const char *a = str;\n    const char *b = suffix;\n\n    // Find the end of both strings\n    while(*a) a++;\n    while(*b) b++;\n\n    // Walk backwards until we find a mismatch or reach the start\n    while(a >= str && b >= suffix) {\n        if(*a-- != *b--)\n            return 0;\n    }\n\n    // If we reached the start of the suffix we found a match\n    return b < suffix;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "جد و أرجع أصغر عدد في المصفوفة المعطاة م"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"c\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "int ends_with(const char *str, const char *suffix) {\n    const char *a = str;\n    const char *b = suffix;\n\n    // Find the end of both strings\n    while(*a) a++;\n    while(*b) b++;\n\n    // Walk backwards until we find a mismatch or reach the start\n    while(a >= str && b >= suffix) {\n        if(*a-- != *b--)\n            return 0;\n    }\n\n    // If we reached the start of the suffix we found a match\n    return b < suffix;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"arAlusus\":\n#define MAX 100000  // Maximum range of values in the array\n\nvoid findFrequency(int a[], int n, int freq[]) {\n    for(int i = 0; i < MAX; i++) {\n        freq[i] = 0;\n    }\n\n    for(int i = 0; i < n; i++) {\n        freq[a[i]]++;\n    }\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nfunction is_string_alphanumeric(s) {\n    for (let i = 0; i < s.length; i++) {\n        console.log(s[i]);\n        const c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}, {"role": "assistant", "content": "check if all characters of a given string are alphanumeric"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"js\":\nimport \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}, {"role": "assistant", "content": "function rfind_char(s, c) {\n    for (let i = s.length - 1; i !== 0; i--) {\n        if (s[i] === c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using js, find and return the position of a given char in a given string starting from its end"}, {"role": "assistant", "content": "function rfind_char(s, c) {\n    for (let i = s.length - 1; i !== 0; i--) {\n        if (s[i] === c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nimport \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "Find and return the minimum in the given array `a`"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"js\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "function min(a) {\n    let result = a[0];\n    for (let i = 1 ; i < a.length ; i++) {\n        if (result > a[i]) {\n            result = a[i];\n        }\n    }\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using arAlusus, استخرج العناصر الفريدة من المصفوفة المعطاة و أرجع النتيجة"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"enAlusus\":\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتهي_ب(س: سند[نـص]، لاحق: سند[نـص]): ثـنائي {\n\tإذا س.هات_الطول() < لاحق.هات_الطول() {\n\t\tارجع خطأ؛\n\t}\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل <= لاحق.هات_الطول() ، دليل++ {\n\t\tإذا لاحق(لاحق.هات_الطول() - دليل) != س(س.هات_الطول() - دليل) {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc ends_with(s: ref[String], suffix: ref[String]): Bool {\n\tif s.getLength() < suffix.getLength() {\n\t\treturn false;\n\t}\n\n    def i: Int;\n\tfor i = 1 , i <= suffix.getLength() , i++ {\n\t\tif (suffix(suffix.getLength() - i) != s(s.getLength() - i)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"c\":\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}, {"role": "assistant", "content": "#define MAX 100000  // Maximum range of values in the array\n\nvoid findFrequency(int a[], int n, int freq[]) {\n    for(int i = 0; i < MAX; i++) {\n        freq[i] = 0;\n    }\n\n    for(int i = 0; i < n; i++) {\n        freq[a[i]]++;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"c\":\nimport \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "void findUniqueElements(int arr[], int n, int uniqueElements[], int *uniqueCount) {\n    // a flag used to indicate whether the element is unique or not\n    int isUnique;\n\n    // loop through the array\n    for (int i = 0; i < n; i++) {\n        isUnique = 1;\n\n        // check if the element is occurred before\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j]) {\n                isUnique = 0;\n                break;\n            }\n        }\n\n        // if the element is unique add it to array\n        if (isUnique) {\n            uniqueElements[(*uniqueCount)++] = arr[i];\n        }\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"arAlusus\":\nimport \"Srl/String\";\n\nuse Srl;\n\nfunc rfind_char(s: ref[String], c: Char): Int {\n    def i: Int;\n\tfor i = s.getLength() - 1 , i != 0 , i-- {\n\t\tif (s(i) == c) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nfunction checkOrder(arr) {\n    let isAscending = true;\n    let isDescending = true;\n\n    for(let i = 0; i < arr.length - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "Check if a given array is ordered and return 1 in case of Ascending order, -1 in case of Descending order, 0 otherwise"}]}
{"messages": [{"role": "user", "content": "Using c, extract unique elements in the given array and return the result"}, {"role": "assistant", "content": "void findUniqueElements(int arr[], int n, int uniqueElements[], int *uniqueCount) {\n    // a flag used to indicate whether the element is unique or not\n    int isUnique;\n\n    // loop through the array\n    for (int i = 0; i < n; i++) {\n        isUnique = 1;\n\n        // check if the element is occurred before\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j]) {\n                isUnique = 0;\n                break;\n            }\n        }\n\n        // if the element is unique add it to array\n        if (isUnique) {\n            uniqueElements[(*uniqueCount)++] = arr[i];\n        }\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"arAlusus\":\nimport \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة ينتمي_نص_للأبجدية_والأرقام(س: سند[نـص]): ثـنائي {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < س.هات_الطول() ، دليل++ {\n\t\tعرف م: مـحرف = س(دليل)؛\n\t\tإذا ( م > 'Z' || م < 'A') && ( م > 'z' || م < 'a') && ( م > '9' || م < '0') {\n\t\t\tارجع خطأ؛\n\t\t}\n\t}\n\tارجع صح؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"enAlusus\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"js\":\nimport \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "function min(a) {\n    let result = a[0];\n    for (let i = 1 ; i < a.length ; i++) {\n        if (result > a[i]) {\n            result = a[i];\n        }\n    }\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using enAlusus, Find and return the minimum in the given array `a`"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "Using enAlusus, calculate and return the frequency of each element in the given array"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\ndef MAX: Int = 100000;\n\n\nfunc findFrequency(a: ref[Array[Int]], freq: ref[Array[Int]]) {\n    def i: Int;\n    for i = 0 , i < MAX , i++ {\n        freq.add(0);\n    }\n\n    for i = 0 , i < a.getLength() , i++ {\n        freq(a(i))++;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"arAlusus\":\nint rfind_char(char s[], int n, char c) {\n    for (int i = n-1; i != 0; i--) {\n        if (s[i] == c) {\n            return i;\n        }\n    }\n    return -1;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"arAlusus\":\nimport \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"enAlusus\":\n#include <stdbool.h>\n\nint checkOrder(int arr[], int n) {\n    bool isAscending = true;\n    bool isDescending = true;\n\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            isAscending = false;\n        }\n        if(arr[i] < arr[i + 1]) {\n            isDescending = false;\n        }\n    }\n\n    if(isAscending) {\n        return 1;\n    } else if(isDescending) {\n        return -1;\n    } else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nاشمل \"مـتم/نـص\"؛\n\nاستخدم مـتم؛\n\n\nدالة جد_المحرف_عكسيا(س: سند[نـص]، م: مـحرف): صـحيح {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = س.هات_الطول() - 1 ، دليل != 0 ، دليل-- {\n\t\tإذا س(دليل) == م {\n\t\t\tارجع دليل؛\n\t\t}\n\t}\n\tارجع -1؛\n}\n"}, {"role": "assistant", "content": "جد و أرجع موقع محرف معطى ضمن سلسلة نصية معطاة بدءاً من نهايتها"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"enAlusus\" to \"arAlusus\":\nimport \"Srl/Array\";\nimport \"Srl/Map\";\n\nuse Srl;\n\nfunc unique(a: ref[Array[Int]]): Array[Int] {\n    def hash: Map[Int, Bool];\n    def result: Array[Int];\n\n    def i: Int;\n    for i = 0 , i < a.getLength() , i++ {\n        if hash.findPos(a(i)) == -1 {\n            result.add(a(i));\n            hash.set(a(i), true);\n        }\n    }\n\n    return result;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "Using arAlusus, جد و أرجع أصغر عدد في المصفوفة المعطاة م"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"arAlusus\":\nfunction findFrequency(a) {\n    let freq = {};\n    for(let i = 0; i < a.length; i++) {\n        const key = a[i].toString();\n        if(freq[key] === undefined) {\n            freq[key] = 1;\n        } else {\n            freq[key]++;\n        }\n    }\n\n    return freq;\n}\n"}, {"role": "assistant", "content": "اشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\nعرف حجم_أعظمي: صـحيح = 100000؛\n\n\nدالة جد_التكرارات(م: سند[مـصفوفة[صـحيح]]، تكرار: سند[مـصفوفة[صـحيح]]) {\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < حجم_أعظمي ، دليل++ {\n\t\tتكرار.أضف(0)؛\n\t}\n\t\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tتكرار(م(دليل))++؛\n\t}\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"c\" to \"enAlusus\":\nint findMin(int* a, int n) {\n    int min = a[0];\n    for(int i = 1; i < n; i++) {\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    return min;\n}\n"}, {"role": "assistant", "content": "import \"Srl/Array\";\n\nuse Srl;\n\n\nfunc min(a: ref[Array[Int]]): Int {\n    def result: Int = a(0);\n\n    def i: Int;\n    for i = 1 , i < a.getLength() , i++ {\n        if a(i) < result {\n            result = a(i);\n        }\n    }\n\n    return result;\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"js\" to \"enAlusus\":\nfunction is_string_alphanumeric(s) {\n    for (let i = 0; i < s.length; i++) {\n        console.log(s[i]);\n        const c = s[i];\n        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9')) {\n            return false;\n        }\n    }\n    return true;\n}\n"}, {"role": "assistant", "content": "import \"Srl/String\";\n\n\nuse Srl;\n\n\nfunc is_string_alphanumeric(s: ref[String]): Bool {\n    def i: Int;\n\tfor i = 0 , i < s.getLength() , i++ {\n\t\tdef c: Char = s(i);\n\t\tif (c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && (c < '0' || c > '9') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n"}]}
{"messages": [{"role": "user", "content": "What this code do?\nimport \"Srl/Array\";\n\n\nuse Srl;\n\n\nfunc checkOrder(a: ref[Array[Int]]) {\n    def isAscending: Bool = true;\n    def isDescending: Bool = true;\n\n    def i: Int;\n    for i = 0 , i + 1 < a.getLength() , i++ {\n        if a(i) > a(i+1) {\n            isAscending = false;\n        }\n        if a(i) < a(i+1) {\n            isDescending = false;\n        }\n    }\n\n    if (isAscending) {\n        return 1;\n    }\n    else if (isDescending) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n}\n"}, {"role": "assistant", "content": "Check if a given array is ordered and return 1 in case of Ascending order, -1 in case of Descending order, 0 otherwise"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"c\":\nاشمل \"مـتم/مـصفوفة\"؛\nاشمل \"مـتم/تـطبيق\"؛\n\nاستخدم مـتم؛\n\nدالة فريد(م: سند[مـصفوفة[صـحيح]]): مـصفوفة[صـحيح] {\n\tعرف هاش: تـطبيق[صـحيح، ثـنائي]؛\n\tعرف نتيجة: مـصفوفة[صـحيح]؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 0 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا هاش.جد_الموقع(م(دليل)) == -1 {\n\t\t\tنتيجة.أضف(م(دليل))؛\n\t\t\tهاش.حدد(م(دليل)، صح)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "void findUniqueElements(int arr[], int n, int uniqueElements[], int *uniqueCount) {\n    // a flag used to indicate whether the element is unique or not\n    int isUnique;\n\n    // loop through the array\n    for (int i = 0; i < n; i++) {\n        isUnique = 1;\n\n        // check if the element is occurred before\n        for (int j = 0; j < i; j++) {\n            if (arr[i] == arr[j]) {\n                isUnique = 0;\n                break;\n            }\n        }\n\n        // if the element is unique add it to array\n        if (isUnique) {\n            uniqueElements[(*uniqueCount)++] = arr[i];\n        }\n    }\n}\n"}]}
{"messages": [{"role": "user", "content": "translate the following code from \"arAlusus\" to \"c\":\nاشمل \"مـتم/مـصفوفة\"؛\n\nاستخدم مـتم؛\n\n\nدالة أصغر_عنصر(م: سند[مـصفوفة[صـحيح]]): صـحيح {\n\n\tعرف نتيجة: صـحيح = م(0)؛\n\n\tعرف دليل: صـحيح؛\n\tلكل دليل = 1 ، دليل < م.هات_الطول() ، دليل++ {\n\t\tإذا م(دليل) < نتيجة {\n\t\t\tنتيجة = م(دليل)؛\n\t\t}\n\t}\n\t\n\tارجع نتيجة؛\n}\n"}, {"role": "assistant", "content": "int findMin(int* a, int n) {\n    int min = a[0];\n    for(int i = 1; i < n; i++) {\n        if(a[i] < min) {\n            min = a[i];\n        }\n    }\n    return min;\n}\n"}]}
